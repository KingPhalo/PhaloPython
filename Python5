



BOOLEAN VALUES, CONDITIONAL EXECUTION, LOOPS, LISTS AND LIST PROCESSING, LOGICAL AND BITWISE OPERATIONS

Equality: the equal to operator (==)
The == (equal to) operator compares the values of two operands. If they are equal, the result of the comparison is True. If they are not equal, the result of the comparison is False.


If the variable has been changed many times during the execution of your program, or its initial value is entered from the console, the answer to this question can be given only by Python and only at runtime.


Inequality: the not equal to operator (!=)
The != (not equal to) operator compares the values of two operands, too. Here is the difference: if they are equal, the result of the comparison is False. If they are not equal, the result of the comparison is True.



Comparison operators: greater than or equal to
The greater than operator has another special, non-strict variant, but it's denoted differently than in classical arithmetic notation: >= (greater than or equal to).

There are two subsequent signs, not one.

Both of these operators (strict and non-strict), as well as the two others discussed in the next section, are binary operators with left-sided binding, and their priority is greater than that shown by == and !=.


CONDITIONS AND CONDITIONAL EXECUTION

To make special requests or to perform specific functions.



LOOPING YOUR CODE WTH FOR


Another kind of loop available in Python comes from the observation that sometimes it's more important to count the "turns" of the loop than to check the conditions.

Actually, the for loop is designed to do more complicated tasks – it can "browse" large collections of data item by item. We'll show you how to do that soon, but right now we're going to present a simpler variant of its application.
the for keyword opens the for loop; note – there's no condition after it; you don't have to think about conditions, as they're checked internally, without any intervention;
any variable after the for keyword is the control variable of the loop; it counts the loop's turns, and does it automatically;
the in keyword introduces a syntax element describing the range of possible values being assigned to the control variable;
the range() function (this is a very special function) is responsible for generating all the desired values of the control variable; in our example, the function will create (we can even say that it will feed the loop with) subsequent values from the following set: 0, 1, 2 .. 97, 98, 99; note: in this case, the range() function starts its job from 0 and finishes it one step (one integer number) before the value of its argument;
note the pass keyword inside the loop body – it does nothing at all; it's an empty instruction – we put it here because the for loop's syntax demands at least one instruction inside the body (by the way – if, elif, else and while express the same thing)




The "break" and "continue" statements

Often times, developers can be faced with two choices :

it appears that it's unnecessary to continue the loop as a whole; you should refrain from further execution of the loop's body and go further;
it appears that you need to start the next turn of the loop without completing the execution of the current turn.


Python provides two special instructions for the implementation of both tasks. For the sake of accuracy, lets say that their existence in the language is not necessary...
any experienced programmer is able to code any algorith without these instructions.
These additions dont improve the language's expressive power but they simplify then developer's work. this is called syntatic candy/sugar.


The two instructions are:

"break" :this exits the loop immediately, and unconditionally ends the loop's operation.
the program begins to execute the nearrest instruction after te loop's body.

"continue" this behaves as if the program has suddenly reached the end of the body
the next turn is started and the condition expression is tested immediately.

it appears that it's unnecessary to continue the loop as a whole; you should refrain from further execution of the loop's body and go further;
it appears that you need to start the next turn of the loop without completing the execution of the current turn.


